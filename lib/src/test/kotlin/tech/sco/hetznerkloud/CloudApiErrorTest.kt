/*
 * This source file was generated by the Gradle 'init' task
 */
package tech.sco.hetznerkloud

import io.kotest.core.spec.style.ShouldSpec
import io.kotest.data.forAll
import io.kotest.data.row
import io.kotest.matchers.shouldBe
import io.kotest.matchers.shouldNotBe
import io.ktor.http.HttpStatusCode
import tech.sco.hetznerkloud.model.ErrorCode
import tech.sco.hetznerkloud.model.RateLimitExceededError
import tech.sco.hetznerkloud.model.UnauthorizedError
import tech.sco.hetznerkloud.response.Failure
import java.time.Instant

private const val TEST_TOKEN = "foo"

class CloudApiErrorTest :
    ShouldSpec({

        val apiToken = ApiToken(TEST_TOKEN)

        should("handle unauthorized error response") {
            val mockEngine = createMockEngine(apiToken)
            val underTest = CloudApiClient.of(ApiToken("invalid token"), mockEngine)

            try {
                underTest.servers.all()
            } catch (f: Failure) {
                f.error shouldBe UnauthorizedError("Request was made with an invalid or unknown token")
                f.request shouldNotBe null
            }
        }

        should("handle rate limit error response") {
            val mockEngine = createErrorEngine(ErrorCode.RATE_LIMIT_EXCEEDED, HttpStatusCode.TooManyRequests)

            val underTest = CloudApiClient.of(ApiToken("invalid token"), mockEngine)

            try {
                underTest.servers.all()
            } catch (f: Failure) {
                f.error.errorCode shouldBe ErrorCode.RATE_LIMIT_EXCEEDED
                val rateLimitError = f.error as RateLimitExceededError
                rateLimitError.hourlyRateLimit shouldBe 3600
                rateLimitError.hourlyRateLimitRemaining shouldBe 2456
                rateLimitError.hourlyRateLimitReset shouldBe Instant.ofEpochSecond(1731011315)
                f.request shouldNotBe null
            }
        }

        should("handle other error responses") {
            forAll(
                row(ErrorCode.FORBIDDEN, HttpStatusCode.Forbidden),
                row(ErrorCode.SERVER_ERROR, HttpStatusCode.InternalServerError),
                row(ErrorCode.SERVICE_ERROR, HttpStatusCode.InternalServerError),
                row(ErrorCode.NOT_FOUND, HttpStatusCode.NotFound),
                row(ErrorCode.JSON_ERROR, HttpStatusCode.BadRequest),
            ) { errorCode, statusCode ->

                val mockEngine = createErrorEngine(errorCode, statusCode)

                val underTest = CloudApiClient.of(ApiToken("invalid token"), mockEngine)

                try {
                    underTest.servers.all()
                } catch (f: Failure) {
                    f.error.errorCode shouldBe errorCode
                    f.request shouldNotBe null
                }
            }
        }
    })
