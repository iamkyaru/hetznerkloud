/*
 * This source file was generated by the Gradle 'init' task
 */
package tech.sco.hetznerkloud

import io.ktor.client.HttpClient
import io.ktor.client.call.body
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.engine.cio.CIO
import io.ktor.client.plugins.auth.Auth
import io.ktor.client.plugins.auth.providers.BearerTokens
import io.ktor.client.plugins.auth.providers.bearer
import io.ktor.client.plugins.contentnegotiation.ContentNegotiation
import io.ktor.client.request.request
import io.ktor.http.appendPathSegments
import io.ktor.serialization.kotlinx.json.json
import tech.sco.hetznerkloud.model.read.DataCenter
import tech.sco.hetznerkloud.response.DataCenterList
import tech.sco.hetznerkloud.response.ImageList
import tech.sco.hetznerkloud.response.IsoList
import tech.sco.hetznerkloud.response.ServerList

private const val URL = "https://api.hetzner.cloud/v1"

class CloudApiClient private constructor(
    httpEngine: HttpClientEngine,
    private val token: ApiToken,
) {
    private val client =
        HttpClient(httpEngine) {
            install(ContentNegotiation) { json() }
            install(Auth) {
                bearer {
                    loadTokens {
                        BearerTokens(accessToken = token.value, refreshToken = null)
                    }
                }
            }
        }

    suspend fun servers(): ServerList = request(Route.GET_ALL_SERVERS)

    suspend fun datacenters(): DataCenterList = request(Route.GET_ALL_DATACENTERS)

    suspend fun images(): ImageList = request(Route.GET_ALL_IMAGES)

    suspend fun isos(): IsoList = request(Route.GET_ALL_ISOS)

    suspend fun serverTypes(): DataCenter.ServerTypes = request(Route.GET_ALL_SERVER_TYPES)

    private suspend inline fun <reified T> request(route: Route): T =
        route.value.let {
            val (httpMethod, path) = it

            client
                .request(URL) {
                    method = httpMethod
                    url {
                        appendPathSegments(path)
                    }
                }.body()
        }

    companion object {
        fun of(
            token: ApiToken,
            httpEngine: HttpClientEngine = CIO.create(),
        ) = CloudApiClient(httpEngine, token)
    }
}
